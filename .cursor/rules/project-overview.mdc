---
description: Project overview, context, and architecture information
globs: ["**/*"]
alwaysApply: true
---

# Project Overview

This is a monorepo for a task management application with two main components:

- **API**: A Hono-based REST API deployed on Vercel with PostgreSQL database (Neon)
- **Mobile**: An Expo React Native mobile app with Clerk authentication

## Tech Stack

- **Package Manager**: pnpm with workspaces
- **Linting/Formatting**: Biome (not ESLint/Prettier)
- **Language**: TypeScript throughout
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: Clerk
- **API Framework**: Hono
- **Mobile Framework**: Expo React Native with Expo Router
- **State Management**: TanStack Query
- **UI**: NativeWind (Tailwind for React Native)

## Repository Structure

```
├── apps/
│   ├── api/
│   │   ├── src/
│   │   │   ├── v1/
│   │   │   │   ├── task/
│   │   │   │   │   ├── __tests__/
│   │   │   │   │   │   └── task.route.test.ts
│   │   │   │   │   └── task.route.ts
│   │   │   │   └── ...
│   │   │   └── ...
│   │   └── ...
│   └── mobile/
├── packages/
│   ├── prisma-client/ # Shared Prisma client
│   └── validation/    # Shared Zod schemas
```

## Documentation First

- **Always** check for and thoroughly review relevant project documentation _before_ starting any task. This includes:
- `README.md` (Project overview, setup, patterns, technology stack)
- `CLAUDE.md` (Additional guidance for AI assistants)
- If documentation is missing, unclear, or conflicts with the request, **ask for clarification**.

## Architecture Adherence

- Understand and respect module boundaries, data flow, system interfaces, and component dependencies.
- Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.

## Pattern & Tech Stack Awareness

- Reference project documentation to understand and utilize existing patterns and technologies.
- Exhaust options using existing implementations before proposing new patterns or libraries.

## Core Philosophy

1. **Simplicity:** Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
2. **Iterate:** Prefer iterating on existing, working code rather than building entirely new solutions from scratch, unless fundamentally necessary or explicitly requested.
3. **Focus:** Concentrate efforts on the specific task assigned. Avoid unrelated changes or scope creep.
4. **Quality:** Strive for a clean, organized, well-tested, and secure codebase.
5. **Collaboration:** This document guides both human developers and the AI assistant for effective teamwork.
