---
description: Code style, quality, and refactoring guidelines
globs: ["**/*"]
alwaysApply: true
---

# Code Style Guidelines

- Use Biome for formatting and linting (not ESLint/Prettier)
- 2-space indentation
- 80-character line width
- Single quotes for JavaScript, double quotes for JSX
- Use sorted Tailwind classes with clsx
- Follow the naming conventions defined in biome.json

## TypeScript Guidelines

Use strict typing (avoid `any`). Document complex logic or public APIs with JSDoc.

## Readability & Maintainability

Write clean, well-organized code.

## Small Files & Components

- Keep files under **300 lines**. Refactor proactively.
- Break down large React components into smaller, single-responsibility components.

## Avoid Duplication (DRY)

Actively look for and reuse existing functionality. Refactor to eliminate duplication.

## Pattern Consistency

Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.

## File Naming

Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.

## No One-Time Scripts

Do not commit one-time utility scripts into the main codebase.

## Commit Message Convention

Follow the conventional commit format for all commit messages:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies
- `ci`: Changes to our CI configuration files and scripts
- `chore`: Other changes that don't modify src or test files
- `revert`: Reverts a previous commit

### Examples

- `feat(api): add user authentication endpoint`
- `fix(mobile): resolve crash on task detail view`
- `refactor(prisma): extract database client to shared package`
- `chore: update dependencies`

## Refactoring

### Purposeful Refactoring

Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals.

### Holistic Check

When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.

### Edit, Don't Copy

Modify existing files directly. Do not duplicate files and rename them (e.g., `component-v2.tsx`).

### Verify Integrations

After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests.
