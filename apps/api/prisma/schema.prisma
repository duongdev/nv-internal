generator client {
  provider = "prisma-client-js"
  // Output the generated Prisma client into the prisma-client workspace package
  output   = "../../../packages/prisma-client/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Connection pool configuration for serverless optimization
  // connection_limit: 1 prevents connection exhaustion in serverless
  // pool_timeout: 0 disables connection timeout
  // query_timeout: 10 sets 10 second query timeout
}

enum TaskStatus {
  PREPARING
  READY
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

model Task {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String
  description   String?
  customer      Customer?    @relation(fields: [customerId], references: [id])
  customerId    String?
  status        TaskStatus   @default(PREPARING)
  assigneeIds   String[]
  startedAt     DateTime?
  completedAt   DateTime?
  geoLocation   GeoLocation? @relation(fields: [geoLocationId], references: [id])
  geoLocationId String?

  // Payment tracking (GAAP-compliant precision)
  expectedRevenue  Decimal?  @db.Decimal(15, 4)  // Set by admin - expected payment amount
  expectedCurrency String    @default("VND")     // Support for future multi-currency
  payments         Payment[]                      // Auto-created at checkout

  // Attachments linked to this task
  attachments   Attachment[]

  // Performance indexes for report queries
  // Note: Actual migration uses CONCURRENTLY and partial WHERE clauses
  @@index([status, completedAt])  // Optimizes completed task date range queries
  @@index([assigneeIds])           // GIN index for array overlap queries (assignee filtering)
}

model GeoLocation {
  id        String   @id @default(cuid())
  address   String?
  name      String?
  lat       Float
  lng       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@index([lat, lng])
}

model Customer {
  id        String   @id @default(cuid())
  name      String?
  phone     String?
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phone])
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  topic     String
  action    String
  payload   Json?

  @@index([userId])
  @@index([createdAt])
  @@index([topic])
  // Composite index for report queries (check-ins by user and date)
  // Note: Actual migration uses partial WHERE clause for TASK_CHECKED_IN only
  @@index([action, userId, createdAt])
}

model Attachment {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime? // Soft delete timestamp

  // Nullable to allow attachments for other entities in future
  task             Task?    @relation(fields: [taskId], references: [id])
  taskId           Int?

  provider         String   // e.g., 'vercel-blob' | 'local-disk'
  url              String?  // optional, private by default
  pathname         String   // storage key/path
  size             Int
  mimeType         String
  originalFilename String
  fileHash         String?
  uploadedBy       String   // Clerk userId

  // Thumbnail and preview support
  thumbnailPathname String?  // Storage path for video thumbnail or resized image
  blurhash          String?  // BlurHash placeholder for images and videos
  width             Int?     // Original width in pixels
  height            Int?     // Original height in pixels

  // Payment invoice relation (one-to-one)
  invoiceForPayment Payment?

  @@index([taskId])
  @@index([uploadedBy])
  @@index([deletedAt])
}

model Payment {
  id                  String      @id @default(cuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  taskId              Int
  task                Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Financial data - GAAP compliant precision (15 digits total, 4 after decimal)
  // Supports up to 999,999,999,999.9999 (nearly 1 trillion with 4 decimal precision)
  amount              Decimal     @db.Decimal(15, 4)
  currency            String      @default("VND")     // ISO 4217 currency code

  // Collection metadata
  collectedAt         DateTime    @default(now())
  collectedBy         String      // Clerk userId (worker who collected payment)

  // Invoice attachment (OPTIONAL - trust workers)
  invoiceAttachmentId String?     @unique
  invoiceAttachment   Attachment? @relation(fields: [invoiceAttachmentId], references: [id], onDelete: SetNull)

  notes               String?     @db.Text

  @@index([taskId])
  @@index([collectedBy])
  @@index([collectedAt])
  @@index([currency])
}
